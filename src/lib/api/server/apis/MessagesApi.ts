/* tslint:disable */
/* eslint-disable */
/**
 * NCorp.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  MessagePage,
} from '../models/index';
import {
    MessagePageFromJSON,
    MessagePageToJSON,
} from '../models/index';

export interface GetRequest {
    roomId: string;
    take?: number;
    cursorCreatedAt?: Date;
    cursorId?: string;
}

/**
 * 
 */
export class MessagesApi extends runtime.BaseAPI {

    /**
     */
    async getRaw(requestParameters: GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<MessagePage>> {
        if (requestParameters['roomId'] == null) {
            throw new runtime.RequiredError(
                'roomId',
                'Required parameter "roomId" was null or undefined when calling get().'
            );
        }

        const queryParameters: any = {};

        if (requestParameters['take'] != null) {
            queryParameters['take'] = requestParameters['take'];
        }

        if (requestParameters['cursorCreatedAt'] != null) {
            queryParameters['cursorCreatedAt'] = (requestParameters['cursorCreatedAt'] as any).toISOString();
        }

        if (requestParameters['cursorId'] != null) {
            queryParameters['cursorId'] = requestParameters['cursorId'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/chat/Messages/{roomId}`.replace(`{${"roomId"}}`, encodeURIComponent(String(requestParameters['roomId']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => MessagePageFromJSON(jsonValue));
    }

    /**
     */
    async get(requestParameters: GetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<MessagePage> {
        const response = await this.getRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
