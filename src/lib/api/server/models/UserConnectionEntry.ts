/* tslint:disable */
/* eslint-disable */
/**
 * NCorp.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ConnectionInfo } from './ConnectionInfo';
import {
    ConnectionInfoFromJSON,
    ConnectionInfoFromJSONTyped,
    ConnectionInfoToJSON,
    ConnectionInfoToJSONTyped,
} from './ConnectionInfo';
import type { LiveUser } from './LiveUser';
import {
    LiveUserFromJSON,
    LiveUserFromJSONTyped,
    LiveUserToJSON,
    LiveUserToJSONTyped,
} from './LiveUser';

/**
 * 
 * @export
 * @interface UserConnectionEntry
 */
export interface UserConnectionEntry {
    /**
     * 
     * @type {LiveUser}
     * @memberof UserConnectionEntry
     */
    user?: LiveUser;
    /**
     * 
     * @type {Set<ConnectionInfo>}
     * @memberof UserConnectionEntry
     */
    connections?: Set<ConnectionInfo>;
    /**
     * 
     * @type {boolean}
     * @memberof UserConnectionEntry
     */
    readonly hasAgentConnection?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserConnectionEntry
     */
    readonly hasWebConnection?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof UserConnectionEntry
     */
    readonly hasBothConnections?: boolean;
}

/**
 * Check if a given object implements the UserConnectionEntry interface.
 */
export function instanceOfUserConnectionEntry(value: object): value is UserConnectionEntry {
    return true;
}

export function UserConnectionEntryFromJSON(json: any): UserConnectionEntry {
    return UserConnectionEntryFromJSONTyped(json, false);
}

export function UserConnectionEntryFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserConnectionEntry {
    if (json == null) {
        return json;
    }
    return {
        
        'user': json['user'] == null ? undefined : LiveUserFromJSON(json['user']),
        'connections': json['connections'] == null ? undefined : (new Set((json['connections'] as Array<any>).map(ConnectionInfoFromJSON))),
        'hasAgentConnection': json['hasAgentConnection'] == null ? undefined : json['hasAgentConnection'],
        'hasWebConnection': json['hasWebConnection'] == null ? undefined : json['hasWebConnection'],
        'hasBothConnections': json['hasBothConnections'] == null ? undefined : json['hasBothConnections'],
    };
}

export function UserConnectionEntryToJSON(json: any): UserConnectionEntry {
    return UserConnectionEntryToJSONTyped(json, false);
}

export function UserConnectionEntryToJSONTyped(value?: Omit<UserConnectionEntry, 'hasAgentConnection'|'hasWebConnection'|'hasBothConnections'> | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'user': LiveUserToJSON(value['user']),
        'connections': value['connections'] == null ? undefined : (Array.from(value['connections'] as Set<any>).map(ConnectionInfoToJSON)),
    };
}

