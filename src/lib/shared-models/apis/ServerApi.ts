/* tslint:disable */
/* eslint-disable */
/**
 * NCorp.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AddGameModel,
  Game,
  InstallableGame,
  LiveUser,
  StringTR,
  TR,
  UpdateFeaturedGamesDto,
  UserConnectionEntry,
  UsernameFileConfig,
} from '../models/index';
import {
    AddGameModelFromJSON,
    AddGameModelToJSON,
    GameFromJSON,
    GameToJSON,
    InstallableGameFromJSON,
    InstallableGameToJSON,
    LiveUserFromJSON,
    LiveUserToJSON,
    StringTRFromJSON,
    StringTRToJSON,
    TRFromJSON,
    TRToJSON,
    UpdateFeaturedGamesDtoFromJSON,
    UpdateFeaturedGamesDtoToJSON,
    UserConnectionEntryFromJSON,
    UserConnectionEntryToJSON,
    UsernameFileConfigFromJSON,
    UsernameFileConfigToJSON,
} from '../models/index';

export interface AddGameRequest {
    addGameModel?: AddGameModel;
}

export interface CoverRequest {
    gameSlug: string;
}

export interface DeleteGameRequest {
    slug?: string;
}

export interface DownloadImageRequest {
    igdbImage?: string;
}

export interface GetAvailableGamesRequest {
    sort?: string;
}

export interface GetGameSizeRequest {
    gameSlug?: string;
}

export interface GetResourceRequest {
    gameSlug?: string;
    resourceName?: string;
}

export interface GetUsernameConfigRequest {
    gameSlug?: string;
}

export interface GetUsernameFileConfigRequest {
    gameSlug?: string;
}

export interface ListGameStartExecutablesRequest {
    gameSlug?: string;
}

export interface SearchGameRequest {
    gameSlug?: string;
}

export interface SearchLogosRequest {
    gameName?: string;
}

export interface SetLocalGamesDirRequest {
    path?: string;
}

export interface UpdateFeaturedGamesRequest {
    updateFeaturedGamesDto?: UpdateFeaturedGamesDto;
}

/**
 * 
 */
export class ServerApi extends runtime.BaseAPI {

    /**
     * Add a game to the list of available games
     */
    async addGameRaw(requestParameters: AddGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TR>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/AddGame`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AddGameModelToJSON(requestParameters['addGameModel']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TRFromJSON(jsonValue));
    }

    /**
     * Add a game to the list of available games
     */
    async addGame(requestParameters: AddGameRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TR> {
        const response = await this.addGameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async coverRaw(requestParameters: CoverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters['gameSlug'] == null) {
            throw new runtime.RequiredError(
                'gameSlug',
                'Required parameter "gameSlug" was null or undefined when calling cover().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/{gameSlug}/Cover`.replace(`{${"gameSlug"}}`, encodeURIComponent(String(requestParameters['gameSlug']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async cover(requestParameters: CoverRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.coverRaw(requestParameters, initOverrides);
    }

    /**
     */
    async deleteGameRaw(requestParameters: DeleteGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<TR>> {
        const queryParameters: any = {};

        if (requestParameters['slug'] != null) {
            queryParameters['slug'] = requestParameters['slug'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/DeleteGame`,
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => TRFromJSON(jsonValue));
    }

    /**
     */
    async deleteGame(requestParameters: DeleteGameRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<TR> {
        const response = await this.deleteGameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async downloadImageRaw(requestParameters: DownloadImageRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['igdbImage'] != null) {
            queryParameters['igdbImage'] = requestParameters['igdbImage'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/DownloadImage`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     */
    async downloadImage(requestParameters: DownloadImageRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.downloadImageRaw(requestParameters, initOverrides);
    }

    /**
     * Get a list of username configurations use to place the username in the game
     */
    async getALlUsernameConfigsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsernameFileConfig>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/GetAllUsernameConfigs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsernameFileConfigFromJSON));
    }

    /**
     * Get a list of username configurations use to place the username in the game
     */
    async getALlUsernameConfigs(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsernameFileConfig>> {
        const response = await this.getALlUsernameConfigsRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getAllConnectionsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<{ [key: string]: UserConnectionEntry; }>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/GetUserConnections`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => runtime.mapValues(jsonValue, UserConnectionEntryFromJSON));
    }

    /**
     */
    async getAllConnections(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<{ [key: string]: UserConnectionEntry; }> {
        const response = await this.getAllConnectionsRaw(initOverrides);
        return await response.value();
    }

    /**
     * List all available games
     */
    async getAvailableGamesRaw(requestParameters: GetAvailableGamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<InstallableGame>>> {
        const queryParameters: any = {};

        if (requestParameters['sort'] != null) {
            queryParameters['sort'] = requestParameters['sort'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/AvailableGames`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(InstallableGameFromJSON));
    }

    /**
     * List all available games
     */
    async getAvailableGames(requestParameters: GetAvailableGamesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<InstallableGame>> {
        const response = await this.getAvailableGamesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getFoldersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/GetFolderSlugs`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async getFolders(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.getFoldersRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getGameSizeRaw(requestParameters: GetGameSizeRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<number>> {
        const queryParameters: any = {};

        if (requestParameters['gameSlug'] != null) {
            queryParameters['gameSlug'] = requestParameters['gameSlug'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/GetGameSize`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        if (this.isJsonMime(response.headers.get('content-type'))) {
            return new runtime.JSONApiResponse<number>(response);
        } else {
            return new runtime.TextApiResponse(response) as any;
        }
    }

    /**
     */
    async getGameSize(requestParameters: GetGameSizeRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<number> {
        const response = await this.getGameSizeRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getLocalGamesDirRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringTR>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/GetLocalGamesDir`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringTRFromJSON(jsonValue));
    }

    /**
     */
    async getLocalGamesDir(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringTR> {
        const response = await this.getLocalGamesDirRaw(initOverrides);
        return await response.value();
    }

    /**
     */
    async getOnlineUsersRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<LiveUser>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/GetOnlineUsers`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(LiveUserFromJSON));
    }

    /**
     */
    async getOnlineUsers(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<LiveUser>> {
        const response = await this.getOnlineUsersRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a game resource
     */
    async getResourceRaw(requestParameters: GetResourceRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        if (requestParameters['gameSlug'] != null) {
            queryParameters['gameSlug'] = requestParameters['gameSlug'];
        }

        if (requestParameters['resourceName'] != null) {
            queryParameters['resourceName'] = requestParameters['resourceName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/Resource`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Get a game resource
     */
    async getResource(requestParameters: GetResourceRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.getResourceRaw(requestParameters, initOverrides);
    }

    /**
     * Get a list of username configuration use to place the username in the game
     */
    async getUsernameConfigRaw(requestParameters: GetUsernameConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsernameFileConfig>> {
        const queryParameters: any = {};

        if (requestParameters['gameSlug'] != null) {
            queryParameters['gameSlug'] = requestParameters['gameSlug'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/GetUsernameConfig`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsernameFileConfigFromJSON(jsonValue));
    }

    /**
     * Get a list of username configuration use to place the username in the game
     */
    async getUsernameConfig(requestParameters: GetUsernameConfigRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsernameFileConfig> {
        const response = await this.getUsernameConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async getUsernameFileConfigRaw(requestParameters: GetUsernameFileConfigRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UsernameFileConfig>> {
        const queryParameters: any = {};

        if (requestParameters['gameSlug'] != null) {
            queryParameters['gameSlug'] = requestParameters['gameSlug'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/GetUsernameFileConfig`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UsernameFileConfigFromJSON(jsonValue));
    }

    /**
     */
    async getUsernameFileConfig(requestParameters: GetUsernameFileConfigRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UsernameFileConfig> {
        const response = await this.getUsernameFileConfigRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listGameStartExecutablesRaw(requestParameters: ListGameStartExecutablesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        if (requestParameters['gameSlug'] != null) {
            queryParameters['gameSlug'] = requestParameters['gameSlug'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/ListGameStartExecutables`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async listGameStartExecutables(requestParameters: ListGameStartExecutablesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.listGameStartExecutablesRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Refresh the list of games from the server
     */
    async refreshGamesRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/RefreshGames`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Refresh the list of games from the server
     */
    async refreshGames(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.refreshGamesRaw(initOverrides);
    }

    /**
     * Search for a game by its folder name
     */
    async searchGameRaw(requestParameters: SearchGameRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<Game>>> {
        const queryParameters: any = {};

        if (requestParameters['gameSlug'] != null) {
            queryParameters['gameSlug'] = requestParameters['gameSlug'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/SearchGame`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(GameFromJSON));
    }

    /**
     * Search for a game by its folder name
     */
    async searchGame(requestParameters: SearchGameRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<Game>> {
        const response = await this.searchGameRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async searchLogosRaw(requestParameters: SearchLogosRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<string>>> {
        const queryParameters: any = {};

        if (requestParameters['gameName'] != null) {
            queryParameters['gameName'] = requestParameters['gameName'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/SearchLogos`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse<any>(response);
    }

    /**
     */
    async searchLogos(requestParameters: SearchLogosRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<string>> {
        const response = await this.searchLogosRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async setLocalGamesDirRaw(requestParameters: SetLocalGamesDirRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<StringTR>> {
        const queryParameters: any = {};

        if (requestParameters['path'] != null) {
            queryParameters['path'] = requestParameters['path'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/SetLocalGamesDir`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StringTRFromJSON(jsonValue));
    }

    /**
     */
    async setLocalGamesDir(requestParameters: SetLocalGamesDirRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<StringTR> {
        const response = await this.setLocalGamesDirRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Update the list of featured games
     */
    async updateFeaturedGamesRaw(requestParameters: UpdateFeaturedGamesRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = await token("Bearer", []);

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        const response = await this.request({
            path: `/api/Server/UpdateFeaturedGames`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UpdateFeaturedGamesDtoToJSON(requestParameters['updateFeaturedGamesDto']),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Update the list of featured games
     */
    async updateFeaturedGames(requestParameters: UpdateFeaturedGamesRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.updateFeaturedGamesRaw(requestParameters, initOverrides);
    }

}
