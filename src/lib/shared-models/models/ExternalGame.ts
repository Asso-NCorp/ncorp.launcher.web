/* tslint:disable */
/* eslint-disable */
/**
 * NCorp.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { ExternalCategory } from './ExternalCategory';
import {
    ExternalCategoryFromJSON,
    ExternalCategoryFromJSONTyped,
    ExternalCategoryToJSON,
    ExternalCategoryToJSONTyped,
} from './ExternalCategory';
import type { ExternalGameMedia } from './ExternalGameMedia';
import {
    ExternalGameMediaFromJSON,
    ExternalGameMediaFromJSONTyped,
    ExternalGameMediaToJSON,
    ExternalGameMediaToJSONTyped,
} from './ExternalGameMedia';
import type { PlatformIdentityOrValue } from './PlatformIdentityOrValue';
import {
    PlatformIdentityOrValueFromJSON,
    PlatformIdentityOrValueFromJSONTyped,
    PlatformIdentityOrValueToJSON,
    PlatformIdentityOrValueToJSONTyped,
} from './PlatformIdentityOrValue';
import type { GameIdentityOrValue } from './GameIdentityOrValue';
import {
    GameIdentityOrValueFromJSON,
    GameIdentityOrValueFromJSONTyped,
    GameIdentityOrValueToJSON,
    GameIdentityOrValueToJSONTyped,
} from './GameIdentityOrValue';

/**
 * 
 * @export
 * @interface ExternalGame
 */
export interface ExternalGame {
    /**
     * 
     * @type {ExternalCategory}
     * @memberof ExternalGame
     */
    category?: ExternalCategory | null;
    /**
     * 
     * @type {string}
     * @memberof ExternalGame
     */
    checksum?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof ExternalGame
     */
    countries?: Array<number> | null;
    /**
     * 
     * @type {Date}
     * @memberof ExternalGame
     */
    createdAt?: Date | null;
    /**
     * 
     * @type {GameIdentityOrValue}
     * @memberof ExternalGame
     */
    game?: GameIdentityOrValue | null;
    /**
     * 
     * @type {number}
     * @memberof ExternalGame
     */
    id?: number | null;
    /**
     * 
     * @type {ExternalGameMedia}
     * @memberof ExternalGame
     */
    media?: ExternalGameMedia | null;
    /**
     * 
     * @type {string}
     * @memberof ExternalGame
     */
    name?: string | null;
    /**
     * 
     * @type {PlatformIdentityOrValue}
     * @memberof ExternalGame
     */
    platform?: PlatformIdentityOrValue | null;
    /**
     * 
     * @type {string}
     * @memberof ExternalGame
     */
    uid?: string | null;
    /**
     * 
     * @type {Date}
     * @memberof ExternalGame
     */
    updatedAt?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof ExternalGame
     */
    url?: string | null;
    /**
     * 
     * @type {number}
     * @memberof ExternalGame
     */
    year?: number | null;
}



/**
 * Check if a given object implements the ExternalGame interface.
 */
export function instanceOfExternalGame(value: object): value is ExternalGame {
    return true;
}

export function ExternalGameFromJSON(json: any): ExternalGame {
    return ExternalGameFromJSONTyped(json, false);
}

export function ExternalGameFromJSONTyped(json: any, ignoreDiscriminator: boolean): ExternalGame {
    if (json == null) {
        return json;
    }
    return {
        
        'category': json['category'] == null ? undefined : ExternalCategoryFromJSON(json['category']),
        'checksum': json['checksum'] == null ? undefined : json['checksum'],
        'countries': json['countries'] == null ? undefined : json['countries'],
        'createdAt': json['createdAt'] == null ? undefined : (new Date(json['createdAt'])),
        'game': json['game'] == null ? undefined : GameIdentityOrValueFromJSON(json['game']),
        'id': json['id'] == null ? undefined : json['id'],
        'media': json['media'] == null ? undefined : ExternalGameMediaFromJSON(json['media']),
        'name': json['name'] == null ? undefined : json['name'],
        'platform': json['platform'] == null ? undefined : PlatformIdentityOrValueFromJSON(json['platform']),
        'uid': json['uid'] == null ? undefined : json['uid'],
        'updatedAt': json['updatedAt'] == null ? undefined : (new Date(json['updatedAt'])),
        'url': json['url'] == null ? undefined : json['url'],
        'year': json['year'] == null ? undefined : json['year'],
    };
}

export function ExternalGameToJSON(json: any): ExternalGame {
    return ExternalGameToJSONTyped(json, false);
}

export function ExternalGameToJSONTyped(value?: ExternalGame | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'category': ExternalCategoryToJSON(value['category']),
        'checksum': value['checksum'],
        'countries': value['countries'],
        'createdAt': value['createdAt'] == null ? undefined : ((value['createdAt'] as any).toISOString()),
        'game': GameIdentityOrValueToJSON(value['game']),
        'id': value['id'],
        'media': ExternalGameMediaToJSON(value['media']),
        'name': value['name'],
        'platform': PlatformIdentityOrValueToJSON(value['platform']),
        'uid': value['uid'],
        'updatedAt': value['updatedAt'] == null ? undefined : ((value['updatedAt'] as any).toISOString()),
        'url': value['url'],
        'year': value['year'],
    };
}

