/* tslint:disable */
/* eslint-disable */
/**
 * NCorp.Server
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 *
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from "../runtime";
/**
 *
 * @export
 * @interface InstallableGame
 */
export interface InstallableGame {
    /**
     *
     * @type {number}
     * @memberof InstallableGame
     */
    sizeGb?: number;
    /**
     *
     * @type {string}
     * @memberof InstallableGame
     */
    title?: string;
    /**
     *
     * @type {string}
     * @memberof InstallableGame
     */
    folderSlug?: string;
    /**
     *
     * @type {string}
     * @memberof InstallableGame
     */
    version?: string | null;
    /**
     *
     * @type {Array<string>}
     * @memberof InstallableGame
     */
    genres?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof InstallableGame
     */
    readonly genresStr?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof InstallableGame
     */
    platforms?: Array<string> | null;
    /**
     *
     * @type {Array<string>}
     * @memberof InstallableGame
     */
    gameModeTypes?: Array<string> | null;
    /**
     *
     * @type {string}
     * @memberof InstallableGame
     */
    editorName?: string | null;
    /**
     *
     * @type {string}
     * @memberof InstallableGame
     */
    mainProcessName?: string | null;
    /**
     *
     * @type {string}
     * @memberof InstallableGame
     */
    cover?: string;
    /**
     *
     * @type {Array<string>}
     * @memberof InstallableGame
     */
    screenshots?: Array<string>;
    /**
     *
     * @type {string}
     * @memberof InstallableGame
     */
    description?: string | null;
    /**
     *
     * @type {string}
     * @memberof InstallableGame
     */
    startCommand?: string | null;
    /**
     *
     * @type {number}
     * @memberof InstallableGame
     */
    maxPlayers?: number;
    /**
     *
     * @type {boolean}
     * @memberof InstallableGame
     */
    isInstalled?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof InstallableGame
     */
    isCompressedAvailable?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof InstallableGame
     */
    useNotifications?: boolean;
    /**
     *
     * @type {boolean}
     * @memberof InstallableGame
     */
    isPlaying?: boolean;

    isSelected?: boolean;

    isInstalling?: boolean;

    installProgress: number;
}

/**
 * Check if a given object implements the InstallableGame interface.
 */
export function instanceOfInstallableGame(value: object): value is InstallableGame {
    return true;
}

export function InstallableGameFromJSON(json: any): InstallableGame {
    return InstallableGameFromJSONTyped(json, false);
}

export function InstallableGameFromJSONTyped(json: any, ignoreDiscriminator: boolean): InstallableGame {
    if (json == null) {
        return json;
    }
    return {
        sizeGb: json["sizeGb"] == null ? undefined : json["sizeGb"],
        title: json["title"] == null ? undefined : json["title"],
        folderSlug: json["folderSlug"] == null ? undefined : json["folderSlug"],
        version: json["version"] == null ? undefined : json["version"],
        genres: json["genres"] == null ? undefined : json["genres"],
        genresStr: json["genresStr"] == null ? undefined : json["genresStr"],
        platforms: json["platforms"] == null ? undefined : json["platforms"],
        gameModeTypes: json["gameModeTypes"] == null ? undefined : json["gameModeTypes"],
        editorName: json["editorName"] == null ? undefined : json["editorName"],
        mainProcessName: json["mainProcessName"] == null ? undefined : json["mainProcessName"],
        cover: json["cover"] == null ? undefined : json["cover"],
        screenshots: json["screenshots"] == null ? undefined : json["screenshots"],
        description: json["description"] == null ? undefined : json["description"],
        startCommand: json["startCommand"] == null ? undefined : json["startCommand"],
        maxPlayers: json["maxPlayers"] == null ? undefined : json["maxPlayers"],
        isInstalled: json["isInstalled"] == null ? undefined : json["isInstalled"],
        isCompressedAvailable: json["isCompressedAvailable"] == null ? undefined : json["isCompressedAvailable"],
        useNotifications: json["useNotifications"] == null ? undefined : json["useNotifications"],
        isPlaying: json["isPlaying"] == null ? undefined : json["isPlaying"],
        isSelected: json["isSelected"] == null ? undefined : json["isSelected"],
        isInstalling: json["isInstalling"] == null ? undefined : json["isInstalling"],
        installProgress: json["installProgress"] == null ? undefined : json["installProgress"],
    };
}

export function InstallableGameToJSON(json: any): InstallableGame {
    return InstallableGameToJSONTyped(json, false);
}

export function InstallableGameToJSONTyped(
    value?: Omit<InstallableGame, "genresStr"> | null,
    ignoreDiscriminator: boolean = false,
): any {
    if (value == null) {
        return value;
    }

    return {
        sizeGb: value["sizeGb"],
        title: value["title"],
        folderSlug: value["folderSlug"],
        version: value["version"],
        genres: value["genres"],
        platforms: value["platforms"],
        gameModeTypes: value["gameModeTypes"],
        editorName: value["editorName"],
        mainProcessName: value["mainProcessName"],
        cover: value["cover"],
        screenshots: value["screenshots"],
        description: value["description"],
        startCommand: value["startCommand"],
        maxPlayers: value["maxPlayers"],
        isInstalled: value["isInstalled"],
        isCompressedAvailable: value["isCompressedAvailable"],
        useNotifications: value["useNotifications"],
        isPlaying: value["isPlaying"],
    };
}
